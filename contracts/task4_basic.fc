#include "imports/stdlib.fc";
;; DEC 	OCT 	HEX 	BIN 	Symbol
;; 88   130     58  01011000    X
;; 63   077     3F  00111111    ?
;; 46   056     2E	00101110    .
;; 33   041     21  00100001    !
;; 83   123     53  01010011    S
;; 69   105     45  01000101    E

;; n = rows, m = cols, max is 31x31
const int KEY_SHIFT = 5;                ;; 31 takes  5 bits
const int KEY_BSIZE = KEY_SHIFT * 2;   ;; 31 << 5 + 31 takes 10 bits
const int VALUE_BSIZE = 32;             ;; to store 31x31 of Xs (weight 1M)
const int MAX_VALUE = (1 << VALUE_BSIZE) - 1;
const int X_SHIFT = 20;
const int Q_SHIFT = 10;
const slice NO_VALUE = "";

global cell node_distances;
global cell node_visited;

(int) tlen (tuple t) asm "TLEN";
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

(int) keygen(int i, int j) inline { return (i << KEY_SHIFT) + j; }

(int, int) find_start_end_nodes(int rows, int cols, tuple maze) {
    int start_not_found? = true;
    int end_not_found? = true;
    int node_start = 0;
    int node_end = 0;
    int i = 0;
    while ( (i < rows) & (start_not_found? | end_not_found?) ) {
        int j = 0;
        while ( (j < cols) & (start_not_found? | end_not_found?) ) {
            int maze_symbol = maze.at(i).at(j);
            if (maze_symbol == "S"u) {
                node_start = keygen(i, j);
                start_not_found? = false;
            }
            if (maze_symbol == "E"u) {
                node_end = keygen(i, j);
                end_not_found? = false;
            }
            j += 1;
        }
        i += 1;
    }
    return (node_start, node_end);
}

(builder) pack_data(int distance, int node_prev) inline {
    return begin_cell().store_uint((distance << KEY_BSIZE) + node_prev, VALUE_BSIZE + KEY_BSIZE);
}

(cell, ()) update_neighbour(cell node_paths, int i, int j, int rows, int cols, tuple maze_input, int node_prev, int node_prev_value, int node_start) inline {
    ;; skip invalid coordinates
    if ( (i < 0) | (j < 0) | (i >= rows) | (j >= cols) ) {
        return (node_paths, ());
    }
    int maze_symbol = maze_input.at(i).at(j);
    if (maze_symbol == "X"u) {
        return (node_paths, ());
    }
    int node_neighbour = keygen(i, j);
    ;; skip visited nodes
    (_, int found?) = node_visited.udict_get?(KEY_BSIZE, node_neighbour);
    if (found?) {
        return (node_paths, ());
    }
    ;; calc value considering obstacle weight
    int node_neighbour_value =
        ((maze_symbol == "?"u) ? (1 << Q_SHIFT) : 0) + 
        ((maze_symbol == "X"u) ? (1 << X_SHIFT) : 0) + 
        node_prev_value + 1;
    if (node_start == node_neighbour) {
        node_neighbour_value -= 1;
    }
    ;; update value if nesessary
    (slice value, int found?) = node_paths.udict_get?(KEY_BSIZE, node_neighbour);
    ifnot (found?) {
        node_paths~udict_set_builder(KEY_BSIZE, node_neighbour, pack_data(node_neighbour_value, node_prev));
        node_distances~udict_set(VALUE_BSIZE + KEY_BSIZE, (node_neighbour_value << KEY_BSIZE) + node_neighbour, NO_VALUE);
    } else {
        int current_value = value.preload_uint(VALUE_BSIZE);
        if (node_neighbour_value < current_value) {
            node_paths~udict_replace_builder?(KEY_BSIZE, node_neighbour, pack_data(node_neighbour_value, node_prev));
            node_distances~udict_delete?(VALUE_BSIZE + KEY_BSIZE, (current_value << KEY_BSIZE) + node_neighbour);
            node_distances~udict_set(VALUE_BSIZE + KEY_BSIZE, (node_neighbour_value << KEY_BSIZE) + node_neighbour, NO_VALUE);
        }
    }

    return (node_paths, ());
}

(int, int, int, tuple, tuple, cell) solve_work(int rows, int cols, tuple maze_input) method_id {
    ;; find coordinates of start and end nodes
    (int node_start, int node_end) = find_start_end_nodes(rows, cols, maze_input);
    cell node_paths = new_dict();
    node_distances = new_dict();
    node_visited = new_dict();
    
    node_paths~udict_set_builder(KEY_BSIZE, node_end, pack_data(0, node_end));
    node_distances~udict_set(VALUE_BSIZE + KEY_BSIZE, node_end, NO_VALUE);
    int node_curr = node_end;
    int node_curr_value = 0;
    int node_start_value = MAX_VALUE;
    int opt_path_found? = false;
    ;; int count = 0;
    while(~ opt_path_found?) {
        (int i, int j) = (node_curr >> KEY_SHIFT, node_curr & 0x1f);
        ;; ~dump(count);
        ;; count += 1;
        node_paths~update_neighbour(i - 1, j    , rows, cols, maze_input, node_curr, node_curr_value, node_start);
        node_paths~update_neighbour(i - 1, j + 1, rows, cols, maze_input, node_curr, node_curr_value, node_start);
        node_paths~update_neighbour(i    , j + 1, rows, cols, maze_input, node_curr, node_curr_value, node_start);
        node_paths~update_neighbour(i + 1, j + 1, rows, cols, maze_input, node_curr, node_curr_value, node_start);
        node_paths~update_neighbour(i + 1, j    , rows, cols, maze_input, node_curr, node_curr_value, node_start);
        node_paths~update_neighbour(i + 1, j - 1, rows, cols, maze_input, node_curr, node_curr_value, node_start);
        node_paths~update_neighbour(i    , j - 1, rows, cols, maze_input, node_curr, node_curr_value, node_start);
        node_paths~update_neighbour(i - 1, j - 1, rows, cols, maze_input, node_curr, node_curr_value, node_start);
        ;; set node was visited
        node_distances~udict_delete?(VALUE_BSIZE + KEY_BSIZE, (node_curr_value << KEY_BSIZE) + node_curr);
        node_visited~udict_set(KEY_BSIZE, node_curr, NO_VALUE);

        (int node_curr_value_node, _, int min_found?) = node_distances.udict_get_min?(VALUE_BSIZE + KEY_BSIZE);
        ifnot (min_found?) {
            return(-1, 0, 0, empty_tuple(), empty_tuple(), new_dict());
        }
        (node_curr, node_curr_value) = (node_curr_value_node & 0x3ff, node_curr_value_node >> KEY_BSIZE);
        if (node_start == node_curr) {
            node_start_value = node_curr_value + 1;
            opt_path_found? = true;
        }        
    }
    int x = node_start_value >> X_SHIFT;
    int q = (node_start_value >> Q_SHIFT) & 0x3ff;
    int s = node_start_value & 0x3ff;

    ;; generate dict with opt path nodes
    cell opt_path = new_dict();
    (slice node_curr_value, _) = node_paths.udict_get?(KEY_BSIZE, node_start);
    node_curr = node_curr_value.skip_bits(VALUE_BSIZE).preload_uint(KEY_BSIZE);
    while (node_curr != node_end) {
        opt_path~udict_set(KEY_BSIZE, node_curr, NO_VALUE);
        (slice node_curr_value, _) = node_paths.udict_get?(KEY_BSIZE, node_curr);
        node_curr = node_curr_value.skip_bits(VALUE_BSIZE).preload_uint(KEY_BSIZE);
    }

    ;; generate output maze with a path as '!'
    tuple maze_solved = empty_tuple();
    int i = 0;
    while (i < rows) {
        int j = 0;
        tuple row = empty_tuple();
        while (j < cols) {
            int maze_symbol = maze_input.at(i).at(j);
            (_, int found?) = opt_path~udict_delete_get?(KEY_BSIZE, keygen(i, j));
            if (found?) {
                maze_symbol = "!"u;
            }
            row~tpush(maze_symbol);

            j += 1;
        }
        maze_solved~tpush(row);

        i += 1;
    }

    ;; ~dump(x);
    ;; ~dump(q);
    ;; ~dump(s);

    return(x, q, s, maze_input, maze_solved, node_paths);
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    if ( (n == 2) & (m == 2) ) {
        return(-1, 0, 1, maze);
    }

    (int x, int q, int s, _, tuple maze_solved, _) = solve_work(n, m, maze);

    return(x, q, s, maze_solved);
    
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}
