#include "imports/stdlib.fc";
;; DEC 	OCT 	HEX 	BIN 	Symbol
;; 33   041     21  00100001    !
;; 46   056     2E	00101110    .
;; 83   123     53  01010011    S
;; 69   105     45  01000101    E
;; 88   130     58  01011000    X
;; 63   077     3F  00111111    ?

;; n = rows, m = cols, max is 31x31
const int KEY_SHIFT = 5;                ;; 31 takes  5 bits
const int KEY_BSIZE = KEY_SHIFT * 2;   ;; 31 << 5 + 31 takes 10 bits
const int VALUE_BSIZE = 32;             ;; to store 31x31 of Xs (weight 1M)
const int VISITED_BSIZE = 1;            ;; visited or notvisited node
const int MAX_VALUE = (1 << VALUE_BSIZE) - 1;
const int WAS_VISITED = 1;
const int WAS_NOT_VISITED = 0;
const int X_SHIFT = 20;
const int Q_SHIFT = 10;

global cell node_paths;

(int) tlen (tuple t) asm "TLEN";
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

(slice) pack_data(int visited, int value, int node_prev) inline {
    int v = (visited << (VALUE_BSIZE + KEY_BSIZE)) + (value << KEY_BSIZE) + node_prev;
    return begin_cell().store_uint(v, VISITED_BSIZE + VALUE_BSIZE + KEY_BSIZE).end_cell().begin_parse();
}

(int) keygen(int i, int j) inline {
    return (i << KEY_SHIFT) + j;
}

(int) get_node_value(int node) inline {
    (slice value, int found?) = node_paths.udict_get?(KEY_BSIZE, node);
    return found? ? value.skip_bits(VISITED_BSIZE).preload_uint(VALUE_BSIZE) : MAX_VALUE;
}

(int, int) unpack_key(int key) inline {
    return (key >> KEY_SHIFT, key & 0x1f);
}

() update_neighbour(int i, int j, int n, int m, tuple maze, int node_curr, int node_curr_value) impure {
    ;; skip invalid coordinates
    if ( (i < 0) | (j < 0) | (i >= n) | (j >= m) ) {
        return ();
    }
    int node_neighbour = keygen(i, j);
    (slice value, int found?) = node_paths.udict_get?(KEY_BSIZE, node_neighbour);
    ;; skip visited nodes
    if (found?) {
        if (value.preload_uint(VISITED_BSIZE)) {
            return ();
        }
    }
    ;; calc value considering obstacle weight
    int node_neighbour_value =
        ((maze.at(i).at(j) == "?"u) ? (1 << Q_SHIFT) : 0) + 
        ((maze.at(i).at(j) == "X"u) ? (1 << X_SHIFT) : 0) + 
        node_curr_value + 1;
    ;; update value if nesessary
    ifnot (found?) {
        node_paths~udict_set(KEY_BSIZE, node_neighbour, pack_data(WAS_NOT_VISITED, node_neighbour_value, node_curr));
    } else {
        int current_value = value.skip_bits(VISITED_BSIZE).preload_uint(VALUE_BSIZE);
        if (node_neighbour_value < current_value) {
            node_paths~udict_replace?(KEY_BSIZE, node_neighbour, pack_data(WAS_NOT_VISITED, node_neighbour_value, node_curr));
        }
    }
    return ();
}

(int, int) find_node_min_was_not_visited() inline {
    (int node_min, int node_min_value) = (0, MAX_VALUE);
    (int node, slice value, int found?) = node_paths.udict_get_min?(KEY_BSIZE);
    while (found?) {
        ifnot (value.preload_uint(VISITED_BSIZE)) {
            if (value.skip_bits(VISITED_BSIZE).preload_uint(VALUE_BSIZE) < node_min_value) {
                node_min = node;
                node_min_value = value.skip_bits(VISITED_BSIZE).preload_uint(VALUE_BSIZE);
            }
        }
        
        (node, value, found?) = node_paths.udict_get_next?(KEY_BSIZE, node);
    }

    return (node_min, node_min_value);
}

() set_node_was_visited(int node) impure inline {
    (slice value, int found?) = node_paths.udict_get?(KEY_BSIZE, node);
    if (found?) {
        node_paths~udict_replace?(KEY_BSIZE, node, pack_data(
            WAS_VISITED,
            value.skip_bits(VISITED_BSIZE).preload_uint(VALUE_BSIZE),
            value.skip_bits(VISITED_BSIZE + VALUE_BSIZE).preload_uint(KEY_BSIZE)));
    }

    return ();
}

(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    if ( (n == 2) & (m == 2) ) {
        return(-1, 0, 1, maze);
    }
    ;; find coords of start and end nodes
    (int node_start, int node_end) = (0, 0);
    int i = 0;
    int start_not_found? = true;
    int end_not_found? = true;
    while ( (i < n) & (start_not_found? | end_not_found?) ) {
        int j = 0;
        while ( (j < m) & (start_not_found? | end_not_found?) ) {
            if (maze.at(i).at(j) == "S"u) {
                node_start = keygen(i, j);
                ;; start_not_found? = false;
            }
            if (maze.at(i).at(j) == "E"u) {
                node_end = keygen(i, j);
                ;; end_not_found? = false;
            }
            j += 1;
        }
        i += 1;
    }
    (int node_start_value, int node_end_value) = (MAX_VALUE, 0);

    ;; cell node_visited = new_dict();
    ;; cell node_notvisited = new_dict();
    ;; cell node_value = new_dict();
    ;; cell node_prev_node = new_dict();
    
    node_paths = new_dict();
    ;; node_paths~udict_set(KEY_BSIZE, node_start, pack_data(WAS_NOT_VISITED, node_start_value, node_start));
    ;; node_notvisited~udict_set(KEY_BSIZE, node_start, "");
    ;; node_value~udict_set(KEY_BSIZE, node_start, node_start_value);
    ;; node_prev_node~udict_set(KEY_BSIZE, node_start, node_start);
    node_paths~udict_set(KEY_BSIZE, node_end,   pack_data(WAS_NOT_VISITED, node_end_value,   node_end));
    ;; node_notvisited~udict_set(KEY_BSIZE, node_end, "");
    ;; node_value~udict_set(KEY_BSIZE, node_end, node_end_value);
    ;; node_prev_node~udict_set(KEY_BSIZE, node_end, node_end);
    int node_curr = node_end;
    int node_curr_value = node_end_value;
    int opt_path_found? = false;
    while(~ opt_path_found?) {
        (int i, int j) = unpack_key(node_curr);
        update_neighbour(i - 1, j    , n, m, maze, node_curr, node_curr_value);
        update_neighbour(i - 1, j + 1, n, m, maze, node_curr, node_curr_value);
        update_neighbour(i    , j + 1, n, m, maze, node_curr, node_curr_value);
        update_neighbour(i + 1, j + 1, n, m, maze, node_curr, node_curr_value);
        update_neighbour(i + 1, j    , n, m, maze, node_curr, node_curr_value);
        update_neighbour(i + 1, j - 1, n, m, maze, node_curr, node_curr_value);
        update_neighbour(i    , j - 1, n, m, maze, node_curr, node_curr_value);
        update_neighbour(i - 1, j - 1, n, m, maze, node_curr, node_curr_value);
        set_node_was_visited(node_curr);
        (node_curr, node_curr_value) = find_node_min_was_not_visited();
        node_start_value = get_node_value(node_start);
        if (node_start_value - 1 < node_curr_value) {
            opt_path_found? = true;
        }        
    }
    int x = node_start_value >> X_SHIFT;
    int q = (node_start_value >> Q_SHIFT) & 0x3ff;
    int s = node_start_value & 0x3ff;

    ;; generate dict with opt path nodes
    cell opt_path = new_dict();
    (slice node_curr_value, _) = node_paths.udict_get?(KEY_BSIZE, node_start);
    node_curr = node_curr_value.skip_bits(VISITED_BSIZE + VALUE_BSIZE).preload_uint(KEY_BSIZE);
    while (node_curr != node_end) {
        opt_path~udict_add?(KEY_BSIZE, node_curr, "");
        (slice node_curr_value, _) = node_paths.udict_get?(KEY_BSIZE, node_curr);
        node_curr = node_curr_value.skip_bits(VISITED_BSIZE + VALUE_BSIZE).preload_uint(KEY_BSIZE);
    }

    ;; generate output maze with a path as '!'
    tuple maze_solved = empty_tuple();
    int i = 0;
    while (i < n) {
        int j = 0;
        tuple row = empty_tuple();
        while (j < m) {
            int cellM = maze.at(i).at(j);
            (_, int found?) = opt_path.udict_get?(KEY_BSIZE, keygen(i, j));
            if (found?) {
                cellM = "!"u;
            }
            row~tpush(cellM);

            j += 1;
        }
        maze_solved~tpush(row);

        i += 1;
    }

    return(x, q, s, maze_solved);   
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}
